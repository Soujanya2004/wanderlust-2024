"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = __importDefault(require("ava"));
const mongodb_1 = require("mongodb");
const MongoStore_1 = __importDefault(require("./MongoStore"));
const testHelper_1 = require("../test/testHelper");
let { store, storePromise } = (0, testHelper_1.createStoreHelper)();
ava_1.default.before(async () => {
    await storePromise.clear().catch((err) => {
        if (err.message.match(/ns not found/)) {
            return null;
        }
        else {
            throw err;
        }
    });
});
ava_1.default.afterEach.always(async () => {
    await storePromise.close();
});
ava_1.default.serial('create store w/o provide required options', (t) => {
    t.throws(() => MongoStore_1.default.create({}), {
        message: /Cannot init client/,
    });
});
ava_1.default.serial('create store with clientPromise', async (t) => {
    const clientP = mongodb_1.MongoClient.connect('mongodb://root:example@127.0.0.1:27017');
    const store = MongoStore_1.default.create({ clientPromise: clientP });
    t.not(store, null);
    t.not(store, undefined);
    await store.collectionP;
    store.close();
});
ava_1.default.serial('create store with client', async (t) => {
    const client = await mongodb_1.MongoClient.connect('mongodb://root:example@127.0.0.1:27017');
    const store = MongoStore_1.default.create({ client: client });
    t.not(store, null);
    t.not(store, undefined);
    await store.collectionP;
    store.close();
});
ava_1.default.serial('length should be 0', async (t) => {
    ;
    ({ store, storePromise } = (0, testHelper_1.createStoreHelper)());
    const length = await storePromise.length();
    t.is(length, 0);
});
ava_1.default.serial('get non-exist session should throw error', async (t) => {
    ;
    ({ store, storePromise } = (0, testHelper_1.createStoreHelper)());
    const res = await storePromise.get('fake-sid');
    t.is(res, null);
});
ava_1.default.serial('get all session should work for no session', async (t) => {
    ;
    ({ store, storePromise } = (0, testHelper_1.createStoreHelper)());
    const allSessions = await storePromise.all();
    t.deepEqual(allSessions, []);
});
ava_1.default.serial('basic operation flow', async (t) => {
    ;
    ({ store, storePromise } = (0, testHelper_1.createStoreHelper)());
    let orgSession = (0, testHelper_1.makeData)();
    const sid = 'test-basic-flow';
    const res = await storePromise.set(sid, orgSession);
    t.is(res, undefined);
    const session = await storePromise.get(sid);
    t.is(typeof session, 'object');
    orgSession = JSON.parse(JSON.stringify(orgSession));
    t.deepEqual(session, orgSession);
    const allSessions = await storePromise.all();
    t.deepEqual(allSessions, [orgSession]);
    t.is(await storePromise.length(), 1);
    const err = await storePromise.destroy(sid);
    t.is(err, undefined);
    t.is(await storePromise.length(), 0);
});
ava_1.default.serial.cb('set and listen to event', (t) => {
    ;
    ({ store, storePromise } = (0, testHelper_1.createStoreHelper)());
    let orgSession = (0, testHelper_1.makeData)();
    const sid = 'test-set-event';
    store.set(sid, orgSession);
    orgSession = JSON.parse(JSON.stringify(orgSession));
    store.on('set', (sessionId) => {
        t.is(sessionId, sid);
        store.get(sid, (err, session) => {
            t.is(err, null);
            t.is(typeof session, 'object');
            t.deepEqual(session, orgSession);
            t.end();
        });
    });
});
ava_1.default.serial.cb('set and listen to create event', (t) => {
    ;
    ({ store, storePromise } = (0, testHelper_1.createStoreHelper)());
    const orgSession = (0, testHelper_1.makeData)();
    const sid = 'test-create-event';
    store.set(sid, orgSession);
    store.on('create', (sessionId) => {
        t.is(sessionId, sid);
        t.end();
    });
});
ava_1.default.serial.cb('set and listen to update event', (t) => {
    ;
    ({ store, storePromise } = (0, testHelper_1.createStoreHelper)());
    const orgSession = (0, testHelper_1.makeData)();
    const sid = 'test-update-event';
    store.set(sid, orgSession);
    store.set(sid, { ...orgSession, foo: 'new-bar' });
    store.on('update', (sessionId) => {
        t.is(sessionId, sid);
        t.end();
    });
});
ava_1.default.serial('set with no stringify', async (t) => {
    ;
    ({ store, storePromise } = (0, testHelper_1.createStoreHelper)({ stringify: false }));
    const orgSession = (0, testHelper_1.makeData)();
    const cookie = orgSession.cookie;
    const sid = 'test-no-stringify';
    const res = await storePromise.set(sid, orgSession);
    t.is(res, undefined);
    const session = await storePromise.get(sid);
    t.is(typeof session, 'object');
    t.deepEqual(orgSession.cookie, cookie);
    // @ts-ignore
    t.deepEqual(cookie.expires.toJSON(), session.cookie.expires.toJSON());
    // @ts-ignore
    t.deepEqual(cookie.secure, session.cookie.secure);
    const err = await storePromise.clear();
    t.is(err, undefined);
    t.is(await storePromise.length(), 0);
});
ava_1.default.serial.cb('test destory event', (t) => {
    ;
    ({ store, storePromise } = (0, testHelper_1.createStoreHelper)());
    const orgSession = (0, testHelper_1.makeData)();
    const sid = 'test-destory-event';
    store.on('destroy', (sessionId) => {
        t.is(sessionId, sid);
        t.end();
    });
    storePromise.set(sid, orgSession).then(() => {
        store.destroy(sid);
    });
});
ava_1.default.serial('test set default TTL', async (t) => {
    var _a;
    const defaultTTL = 10;
    ({ store, storePromise } = (0, testHelper_1.createStoreHelper)({
        ttl: defaultTTL,
    }));
    const orgSession = (0, testHelper_1.makeDataNoCookie)();
    const sid = 'test-set-default-ttl';
    const timeBeforeSet = new Date().valueOf();
    // @ts-ignore
    await storePromise.set(sid, orgSession);
    const collection = await store.collectionP;
    const session = await collection.findOne({ _id: sid });
    const timeAfterSet = new Date().valueOf();
    const expires = (_a = session === null || session === void 0 ? void 0 : session.expires) === null || _a === void 0 ? void 0 : _a.valueOf();
    t.truthy(expires);
    if (expires) {
        t.truthy(timeBeforeSet + defaultTTL * 1000 <= expires);
        t.truthy(expires <= timeAfterSet + defaultTTL * 1000);
    }
});
ava_1.default.serial('test default TTL', async (t) => {
    var _a;
    const defaultExpirationTime = 1000 * 60 * 60 * 24 * 14;
    ({ store, storePromise } = (0, testHelper_1.createStoreHelper)());
    const orgSession = (0, testHelper_1.makeDataNoCookie)();
    const sid = 'test-no-set-default-ttl';
    const timeBeforeSet = new Date().valueOf();
    // @ts-ignore
    await storePromise.set(sid, orgSession);
    const collection = await store.collectionP;
    const session = await collection.findOne({ _id: sid });
    const timeAfterSet = new Date().valueOf();
    const expires = (_a = session === null || session === void 0 ? void 0 : session.expires) === null || _a === void 0 ? void 0 : _a.valueOf();
    t.truthy(expires);
    if (expires) {
        t.truthy(timeBeforeSet + defaultExpirationTime <= expires);
        t.truthy(expires <= timeAfterSet + defaultExpirationTime);
    }
});
ava_1.default.serial('test custom serializer', async (t) => {
    ;
    ({ store, storePromise } = (0, testHelper_1.createStoreHelper)({
        serialize: (obj) => {
            obj.ice = 'test-ice-serializer';
            return JSON.stringify(obj);
        },
    }));
    const orgSession = (0, testHelper_1.makeData)();
    const sid = 'test-custom-serializer';
    await storePromise.set(sid, orgSession);
    const session = await storePromise.get(sid);
    t.is(typeof session, 'string');
    t.not(session, undefined);
    // @ts-ignore
    orgSession.ice = 'test-ice-serializer';
    // @ts-ignore
    t.is(session, JSON.stringify(orgSession));
});
ava_1.default.serial('test custom deserializer', async (t) => {
    ;
    ({ store, storePromise } = (0, testHelper_1.createStoreHelper)({
        unserialize: (obj) => {
            obj.ice = 'test-ice-deserializer';
            return obj;
        },
    }));
    const orgSession = (0, testHelper_1.makeData)();
    const sid = 'test-custom-deserializer';
    await storePromise.set(sid, orgSession);
    const session = await storePromise.get(sid);
    t.is(typeof session, 'object');
    // @ts-ignore
    orgSession.cookie = orgSession.cookie.toJSON();
    // @ts-ignore
    orgSession.ice = 'test-ice-deserializer';
    t.not(session, undefined);
    t.deepEqual(session, orgSession);
});
ava_1.default.serial('touch ops', async (t) => {
    var _a, _b, _c, _d;
    ;
    ({ store, storePromise } = (0, testHelper_1.createStoreHelper)());
    const orgSession = (0, testHelper_1.makeDataNoCookie)();
    const sid = 'test-touch';
    // @ts-ignore
    await storePromise.set(sid, orgSession);
    const collection = await store.collectionP;
    const session = await collection.findOne({ _id: sid });
    await new Promise((resolve) => setTimeout(resolve, 500));
    t.not(session, undefined);
    await storePromise.touch(sid, session === null || session === void 0 ? void 0 : session.session);
    const session2 = await collection.findOne({ _id: sid });
    t.not(session2, undefined);
    // Check if both expiry date are different
    t.truthy((_a = session2 === null || session2 === void 0 ? void 0 : session2.expires) === null || _a === void 0 ? void 0 : _a.getTime());
    t.truthy((_b = session === null || session === void 0 ? void 0 : session.expires) === null || _b === void 0 ? void 0 : _b.getTime());
    if (((_c = session === null || session === void 0 ? void 0 : session.expires) === null || _c === void 0 ? void 0 : _c.getTime()) && ((_d = session2 === null || session2 === void 0 ? void 0 : session2.expires) === null || _d === void 0 ? void 0 : _d.getTime())) {
        t.truthy((session2 === null || session2 === void 0 ? void 0 : session2.expires.getTime()) > (session === null || session === void 0 ? void 0 : session.expires.getTime()));
    }
});
ava_1.default.serial('touch ops with touchAfter', async (t) => {
    var _a, _b;
    ;
    ({ store, storePromise } = (0, testHelper_1.createStoreHelper)({ touchAfter: 1 }));
    const orgSession = (0, testHelper_1.makeDataNoCookie)();
    const sid = 'test-touch-with-touchAfter';
    // @ts-ignore
    await storePromise.set(sid, orgSession);
    const collection = await store.collectionP;
    const session = await collection.findOne({ _id: sid });
    const lastModifiedBeforeTouch = (_a = session === null || session === void 0 ? void 0 : session.lastModified) === null || _a === void 0 ? void 0 : _a.getTime();
    t.not(session, undefined);
    await storePromise.touch(sid, session);
    const session2 = await collection.findOne({ _id: sid });
    t.not(session2, undefined);
    const lastModifiedAfterTouch = (_b = session2 === null || session2 === void 0 ? void 0 : session2.lastModified) === null || _b === void 0 ? void 0 : _b.getTime();
    // Check if both expiry date are different
    t.is(lastModifiedBeforeTouch, lastModifiedAfterTouch);
});
ava_1.default.serial('touch ops with touchAfter with touch', async (t) => {
    var _a, _b;
    ;
    ({ store, storePromise } = (0, testHelper_1.createStoreHelper)({ touchAfter: 1 }));
    const orgSession = (0, testHelper_1.makeDataNoCookie)();
    const sid = 'test-touch-with-touchAfter-should-touch';
    // @ts-ignore
    await storePromise.set(sid, orgSession);
    const collection = await store.collectionP;
    const session = await collection.findOne({ _id: sid });
    const lastModifiedBeforeTouch = (_a = session === null || session === void 0 ? void 0 : session.lastModified) === null || _a === void 0 ? void 0 : _a.getTime();
    await new Promise((resolve) => setTimeout(resolve, 1200));
    t.not(session, undefined);
    await storePromise.touch(sid, session);
    const session2 = await collection.findOne({ _id: sid });
    t.not(session2, undefined);
    const lastModifiedAfterTouch = (_b = session2 === null || session2 === void 0 ? void 0 : session2.lastModified) === null || _b === void 0 ? void 0 : _b.getTime();
    // Check if both expiry date are different
    t.truthy(lastModifiedAfterTouch);
    t.truthy(lastModifiedBeforeTouch);
    if (lastModifiedAfterTouch && lastModifiedBeforeTouch) {
        t.truthy(lastModifiedAfterTouch > lastModifiedBeforeTouch);
    }
});
ava_1.default.serial('basic operation flow with crypto', async (t) => {
    ;
    ({ store, storePromise } = (0, testHelper_1.createStoreHelper)({
        crypto: { secret: 'secret' },
        collectionName: 'crypto-test',
        autoRemove: 'disabled',
    }));
    let orgSession = (0, testHelper_1.makeData)();
    const sid = 'test-basic-flow-with-crypto';
    const res = await storePromise.set(sid, orgSession);
    t.is(res, undefined);
    const session = await storePromise.get(sid);
    orgSession = JSON.parse(JSON.stringify(orgSession));
    // @ts-ignore
    t.deepEqual(session, orgSession);
    const sessions = await storePromise.all();
    t.not(sessions, undefined);
    t.not(sessions, null);
    t.is(sessions === null || sessions === void 0 ? void 0 : sessions.length, 1);
});
ava_1.default.serial('with touch after and get non-exist session', async (t) => {
    ;
    ({ store, storePromise } = (0, testHelper_1.createStoreHelper)({
        touchAfter: 10,
    }));
    const sid = 'fake-sid-for-test-touch-after';
    const res = await storePromise.get(sid);
    t.is(res, null);
});
//# sourceMappingURL=data:application/json;base64,
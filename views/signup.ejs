<% layout("/layouts/boilerplate") %>
<br>
<br>
<style>
    .form-background {
        position: relative; 
        overflow: hidden;
        border-radius: 5px; 
    }

    .form-background::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: url('../public/bg-image.png'); 
        background-size: cover;
        background-position: center; 
        filter: blur(7px); 
        z-index: 0; 
    }

    .form_body {
        position: relative; 
        background-color: rgba(241, 241, 241, 0.6); 
        border-radius: 5px; 
        padding: 30px;
        box-shadow: 0 7px 15px rgba(113, 113, 113, 0.626); 
        z-index: 1; 
    }
    label{
        font-size: large;
        font-weight: bolder;
    }
/*
    .form_body {
            background-color: #f1f1f1;
            border-radius: 5px;
            padding: 30px;
            box-shadow: 0 7px 15px rgba(113, 113, 113, 0.626);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
*/
    /* Form Container - Floating Effect */
    .dark-mode{
        .form_body {
            background-color: #2e2e2e;
            border-radius: 5px;
            padding: 30px;
            box-shadow: 0 7px 15px rgba(0, 0, 0, 0.5);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .form-label {
            color: #ffffff;
        }
        /* Input Fields Styling */
        .signup_form input[type="text"], input[type="password"],input[type="email"]{
            background-color: #373737;
            color: #ffffff;
            border: 1px solid #555555;
            /* transition: box-shadow 0.3s ease; */
        }
    
        .signup_form input[type="text"]::placeholder,
        .signup_form input[type="password"]::placeholder, 
        .signup_form input[type="email"]::placeholder {
            color: #aaaaaa;
        }
    }
    
    /* Style for the form-control with toggle icon */
    .signup_form {
        position: relative;
    }

    /* Adjust the toggle icon position */
    .signup_form .toggle-icon {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        cursor: pointer;
        z-index: 2;
    }

    /* Shift the toggle icon up when feedback is displayed */
    .signup_form .form-control.is-invalid ~ .toggle-icon,
    .signup_form .form-control.is-valid ~ .toggle-icon {
        top: 85% !important;
    }


    </style>
<div class="row">
    <div class="col-11 col-md-8 col-lg-4 mx-auto form_body form-background">
        <form method="POST" action="/signup" class="needs-validation form_body" id="signupForm" novalidate>
            <div class="mb-3 signup_form">
                <label for="username" class="form-label">Username</label>
                <input type="text" name="username" placeholder="Username" class="form-control" required>
                <div class="valid-feedback">
                     looks great!
                </div>
                <div class="invalid-feedback">
                    Please enter a valid username
               </div>
            </div>
            <div class="mb-3 signup_form">
                <label for="email" class="form-label">Email Id</label>
                <input type="email" name="email" placeholder="Email"  class="form-control"required>
                <div class="valid-feedback">
                     looks great!
                </div>
                <div class="invalid-feedback">
                    Please enter a valid email
               </div>
            </div>
            <div class="mb-3 signup_form">
                <label for="password" class="form-label">Password</label>
                <div class="password-box">
                    <input type="password" name="password" placeholder="Password" class="form-control" id="password" required pattern="(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}">
                    <i id="togglePassword" class="toggle-icon passkey passwordToggler fa fa-eye"></i> 
                    
                <div class="valid-feedback">Looks great!</div>
                <div class="invalid-feedback">Password must be at least 8 characters, include uppercase, lowercase, a number, and a special character.</div>
                </div>
            </div>
            <div class="mb-3 signup_form">
                <label for="cnfPassword" class="form-label">Confirm Password</label>
                <div class="password-box">
                    <input type="password" name="cnfPassword" placeholder="Confirm Password" class="form-control" id="cnfPassword" required>
                    <i id="toggleConfirmPassword" class="toggle-icon cnf-passkey passwordToggler fa fa-eye"></i>
                    
                <div class="valid-feedback">Looks great!</div>
                <div class="invalid-feedback">Passwords should match.</div>
                </div>
            </div>
            <br>
            <div class="d-grid gap-2">
                <button class="btn btn-danger" name="saveButton" type="submit">Sign up</button>
                <!-- <a class="btn btn-secondary" name="saveButton" type="button">Go back</a> -->
                <a href="/listing" class="btn btn-secondary" type="button">Go back</a>
            </div>
        </form>
    </div>        
</div>

<script>
  document.getElementById('signupForm').addEventListener('submit', function (event) {
    const form = event.target;
    
    // Prevent submission if the form is invalid
    if (!form.checkValidity()) {
        event.preventDefault();
        event.stopPropagation();
    }

        // Add Bootstrap validation classes
        form.classList.add('was-validated');
    });

    // Password and Confirm Password Validation
    const password = document.getElementById("password");
    const cnfPassword = document.getElementById("cnfPassword");

    function validatePasswordMatch() {
        if (password.value && cnfPassword.value) {
            if (password.value === cnfPassword.value) {
                cnfPassword.classList.add("is-valid");
                cnfPassword.classList.remove("is-invalid");
                cnfPassword.setCustomValidity('');
            } else {
                cnfPassword.classList.add("is-invalid");
                cnfPassword.classList.remove("is-valid");
                cnfPassword.setCustomValidity("Passwords don't match");
            }
        } else {
            cnfPassword.classList.remove("is-valid", "is-invalid");
        }
    }

    // Event listeners for password fields to trigger validation feedback
    password.addEventListener('input', () => {
        if (password.checkValidity()) {
            password.classList.add("is-valid");
            password.classList.remove("is-invalid");
        } else {
            password.classList.add("is-invalid");
            password.classList.remove("is-valid");
        }
        validatePasswordMatch();
    });

    cnfPassword.addEventListener('input', validatePasswordMatch);
</script>
